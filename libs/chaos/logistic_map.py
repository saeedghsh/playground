"""This module provides objects for chaotic processes"""

from types import SimpleNamespace
from typing import Protocol, Union

import numpy as np
from scipy import fftpack

FloatOrArray = Union[float, np.ndarray]


class MapFunction(Protocol):  # pylint: disable=too-few-public-methods
    """Explicitly specify the signature of 'map functions'"""

    def __call__(self, x: FloatOrArray) -> FloatOrArray:
        pass


def logistic_map(r: float, x: FloatOrArray) -> FloatOrArray:
    """Return next value of a logistic map, give parameter r and current value x."""
    return r * x * (1 - x)


def cobweb(map_function: MapFunction, x0: float, length: int) -> np.ndarray:
    """Return the points (xy-values) representing the cobweb diagram of the map_function."""
    xy = np.zeros((length, 2))
    xy[0, :] = [x0, 0]
    for n in range(1, length - 1, 2):
        xy[n, :] = [xy[n - 1, 0], map_function(x=xy[n - 1, 0])]  # type: ignore
        xy[n + 1, :] = [xy[n, 1], xy[n, 1]]
    return xy


def sequence(map_function: MapFunction, x0: float, length: int) -> np.ndarray:
    """Return a sequence points generated by the map_function with x0 as initial value."""
    signal = [x0]
    for _ in range(length - 1):
        signal.append(map_function(x=signal[-1]))  # type: ignore
    return np.array(signal)


def curve(map_function: MapFunction, x: np.ndarray) -> np.ndarray:
    """Return a set of points (xy-value) representing the curve of the map_function."""
    y = map_function(x=x)  # type: ignore
    return np.array([x, y]).T


def generate_data(
    map_function: MapFunction, sequences_count: int, sequences_length: int
) -> SimpleNamespace:
    """Construct signals and sequences from map_function

    * sequences contains a list of sequences each with a different random initial value
    * frequency_response is of the sequences[0]
    * curve_points is the range of map_function on [0,1] domain
    * cobweb_points is constructed from map_function and a random initial value
    """
    sequences = [
        sequence(map_function, initial_value, sequences_length)
        for initial_value in np.random.random(sequences_count)
    ]
    cobweb_points = cobweb(map_function, np.random.random(), sequences_length)
    frequency_response = fftpack.fft(sequences[0])
    curve_domain = np.linspace(0, 1, 100)
    curve_points = curve(map_function, curve_domain)
    return SimpleNamespace(
        sequences=sequences,
        cobweb_points=cobweb_points,
        frequency_response=frequency_response,
        curve_points=curve_points,
    )
